// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mocks

//go:generate minimock -i learngo-pockets/templates/internal/handlers.Logger -o logger_mock.go -n LoggerMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// LoggerMock implements handlers.Logger
type LoggerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcLogf          func(format string, args ...any)
	inspectFuncLogf   func(format string, args ...any)
	afterLogfCounter  uint64
	beforeLogfCounter uint64
	LogfMock          mLoggerMockLogf
}

// NewLoggerMock returns a mock for handlers.Logger
func NewLoggerMock(t minimock.Tester) *LoggerMock {
	m := &LoggerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.LogfMock = mLoggerMockLogf{mock: m}
	m.LogfMock.callArgs = []*LoggerMockLogfParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLoggerMockLogf struct {
	mock               *LoggerMock
	defaultExpectation *LoggerMockLogfExpectation
	expectations       []*LoggerMockLogfExpectation

	callArgs []*LoggerMockLogfParams
	mutex    sync.RWMutex
}

// LoggerMockLogfExpectation specifies expectation struct of the Logger.Logf
type LoggerMockLogfExpectation struct {
	mock   *LoggerMock
	params *LoggerMockLogfParams

	Counter uint64
}

// LoggerMockLogfParams contains parameters of the Logger.Logf
type LoggerMockLogfParams struct {
	format string
	args   []any
}

// Expect sets up expected params for Logger.Logf
func (mmLogf *mLoggerMockLogf) Expect(format string, args ...any) *mLoggerMockLogf {
	if mmLogf.mock.funcLogf != nil {
		mmLogf.mock.t.Fatalf("LoggerMock.Logf mock is already set by Set")
	}

	if mmLogf.defaultExpectation == nil {
		mmLogf.defaultExpectation = &LoggerMockLogfExpectation{}
	}

	mmLogf.defaultExpectation.params = &LoggerMockLogfParams{format, args}
	for _, e := range mmLogf.expectations {
		if minimock.Equal(e.params, mmLogf.defaultExpectation.params) {
			mmLogf.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLogf.defaultExpectation.params)
		}
	}

	return mmLogf
}

// Inspect accepts an inspector function that has same arguments as the Logger.Logf
func (mmLogf *mLoggerMockLogf) Inspect(f func(format string, args ...any)) *mLoggerMockLogf {
	if mmLogf.mock.inspectFuncLogf != nil {
		mmLogf.mock.t.Fatalf("Inspect function is already set for LoggerMock.Logf")
	}

	mmLogf.mock.inspectFuncLogf = f

	return mmLogf
}

// Return sets up results that will be returned by Logger.Logf
func (mmLogf *mLoggerMockLogf) Return() *LoggerMock {
	if mmLogf.mock.funcLogf != nil {
		mmLogf.mock.t.Fatalf("LoggerMock.Logf mock is already set by Set")
	}

	if mmLogf.defaultExpectation == nil {
		mmLogf.defaultExpectation = &LoggerMockLogfExpectation{mock: mmLogf.mock}
	}

	return mmLogf.mock
}

// Set uses given function f to mock the Logger.Logf method
func (mmLogf *mLoggerMockLogf) Set(f func(format string, args ...any)) *LoggerMock {
	if mmLogf.defaultExpectation != nil {
		mmLogf.mock.t.Fatalf("Default expectation is already set for the Logger.Logf method")
	}

	if len(mmLogf.expectations) > 0 {
		mmLogf.mock.t.Fatalf("Some expectations are already set for the Logger.Logf method")
	}

	mmLogf.mock.funcLogf = f
	return mmLogf.mock
}

// Logf implements handlers.Logger
func (mmLogf *LoggerMock) Logf(format string, args ...any) {
	mm_atomic.AddUint64(&mmLogf.beforeLogfCounter, 1)
	defer mm_atomic.AddUint64(&mmLogf.afterLogfCounter, 1)

	if mmLogf.inspectFuncLogf != nil {
		mmLogf.inspectFuncLogf(format, args...)
	}

	mm_params := LoggerMockLogfParams{format, args}

	// Record call args
	mmLogf.LogfMock.mutex.Lock()
	mmLogf.LogfMock.callArgs = append(mmLogf.LogfMock.callArgs, &mm_params)
	mmLogf.LogfMock.mutex.Unlock()

	for _, e := range mmLogf.LogfMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmLogf.LogfMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLogf.LogfMock.defaultExpectation.Counter, 1)
		mm_want := mmLogf.LogfMock.defaultExpectation.params
		mm_got := LoggerMockLogfParams{format, args}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmLogf.t.Errorf("LoggerMock.Logf got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmLogf.funcLogf != nil {
		mmLogf.funcLogf(format, args...)
		return
	}
	mmLogf.t.Fatalf("Unexpected call to LoggerMock.Logf. %v %v", format, args)

}

// LogfAfterCounter returns a count of finished LoggerMock.Logf invocations
func (mmLogf *LoggerMock) LogfAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLogf.afterLogfCounter)
}

// LogfBeforeCounter returns a count of LoggerMock.Logf invocations
func (mmLogf *LoggerMock) LogfBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLogf.beforeLogfCounter)
}

// Calls returns a list of arguments used in each call to LoggerMock.Logf.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLogf *mLoggerMockLogf) Calls() []*LoggerMockLogfParams {
	mmLogf.mutex.RLock()

	argCopy := make([]*LoggerMockLogfParams, len(mmLogf.callArgs))
	copy(argCopy, mmLogf.callArgs)

	mmLogf.mutex.RUnlock()

	return argCopy
}

// MinimockLogfDone returns true if the count of the Logf invocations corresponds
// the number of defined expectations
func (m *LoggerMock) MinimockLogfDone() bool {
	for _, e := range m.LogfMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LogfMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLogfCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLogf != nil && mm_atomic.LoadUint64(&m.afterLogfCounter) < 1 {
		return false
	}
	return true
}

// MinimockLogfInspect logs each unmet expectation
func (m *LoggerMock) MinimockLogfInspect() {
	for _, e := range m.LogfMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LoggerMock.Logf with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LogfMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLogfCounter) < 1 {
		if m.LogfMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LoggerMock.Logf")
		} else {
			m.t.Errorf("Expected call to LoggerMock.Logf with params: %#v", *m.LogfMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLogf != nil && mm_atomic.LoadUint64(&m.afterLogfCounter) < 1 {
		m.t.Error("Expected call to LoggerMock.Logf")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LoggerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockLogfInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LoggerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LoggerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockLogfDone()
}
